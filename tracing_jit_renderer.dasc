#include <stdbool.h>
#include <sys/mman.h>

#include "dynasm/dasm_proto.h"
#include "dynasm/dasm_x86.h"

#include "jitdump.h"
#include "renderer.h"
#include "vec.h"

/* Based on http://corsix.github.io/dynasm-doc/tutorial.html */

/* Force the compiler to generate non-inline functions to be called from the
 * JIT'ed code */
static inline float sdSphere(v3 p, float s);
static inline float sdBox(v3 p, v3 b);
static inline float sdRoundBox(v3 p, v3 b, float r);

struct world_dist {
	float dist;
	Uint32 id;
};

/* Type of the JIT'ed sdf code */
typedef struct world_dist (*sdfFun)(v3);

struct jited_code {
	sdfFun f;
	void* addr;
	size_t size;
};

static inline void generate_obj_dist(Dst_DECL, const struct object* obj);

/* File-local JIT'ed code.
 * __attribute__((used)) is necesary because the variable is only read from the
 * inline assembly. */
__attribute__((used))
static sdfFun sdf;
static bool emit_jitdump;

/* Call sdf(p) signaling the compiler on the clobbered registers. */
static inline
struct world_dist sdfcall(v3 p) {
	struct world_dist rval;

	asm("movdqu %1, %%xmm0\n"
	    "callq *sdf(%%rip)\n"
	   : "=a" (rval)
	   : "x" (p.vec)
	   : "xmm0", "xmm1", "xmm2", "xmm8", "xmm14", "xmm15", "r8");

	return rval;
}

/* float-to-uint32
 * TODO: Is there a non-ub way of doing this? */
#define F2U(f) (*(unsigned*)(&(f)))
#define FLOAT_INF 0x7F800000

static
void* link_and_encode(dasm_State** d, size_t* out_size) {
	size_t size;
	void* buf;
	dasm_link(d, &size);
	buf = mmap(0, size, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS,
	           -1, 0);
	dasm_encode(d, buf);
	mprotect(buf, size, PROT_READ | PROT_EXEC);

	if (out_size)
		*out_size = size;

	return buf;
}

static inline
struct jited_code generate_sdf(const struct scene* scene) {
	dasm_State* d;

	/* TODO: Support other architectures? */
	|.arch x64
	|.section code, data

	dasm_init(&d, DASM_MAXSECTION);

	|.globals lbl_
	void* labels[lbl__MAX];
	dasm_setupglobal(&d, labels, lbl__MAX);

	|.actionlist sdf_actions
	dasm_setup(&d, sdf_actions);

	/* Prelude definitions */
	dasm_State** Dst = &d;
	|.data
	|.align qword
	|->initial_value:
	|.dword FLOAT_INF, 0
	|.align oword
	|->v3_mask:
	|.dword 0xFFFFFFFF, 0xFFFFFFFF, 0xFFFFFFFF, 0x00000000
	|->one_half:
	|.dword 0x3F000000
	|->one:
	|.dword 0x3F800000
	|->zero:
	|.dword 0x00000000

	/* INPUT:
	 * xmm0: x pos, y pos, z pos
	 * OUTPUT: rax (dist, id)
	 * CLOBBERS: xmm0, xmm1, xmm2, xmm8, xmm14, xmm15, r8 */
	|.code
	|->sdf_main:
	| andps		xmm0,		[->v3_mask]
	| movdqa	xmm2,		xmm0
	/* xmm2: x pos, y pos, z pos */
	| movq		xmm1,		qword [->initial_value]

	| xor		r8d,		r8d
	vector_foreach(struct object, scene->objects, obj) {
		| inc		r8d
		generate_obj_dist(&d, obj);
		| pinsrd	xmm8,		r8d,	1
		| movdqa	xmm0,		xmm8
		| cmpps		xmm0,		xmm1,	2
		| shufps	xmm0,		xmm0,	0
		| blendvps	xmm1,		xmm8,	xmm0
	}

	| movq		qword [rsp-8],	xmm1
	| mov		rax,		[rsp-8]
	| ret
	size_t sdf_size;
	void* sdf_addr = link_and_encode(&d, &sdf_size);
	dasm_free(&d);

	return (struct jited_code) {
		(sdfFun)labels[lbl_sdf_main],
		sdf_addr,
		sdf_size
	};
}

/* INPUT:    xmm2 point
 * OUTPUT:   xmm8 distance
 * CLOBBERS: xmm14, xmm15 */
static inline
void generate_obj_dist(Dst_DECL, const struct object* obj) {
	|.data
	|.align oword
	|1:
	|.dword F2U(obj->point.x), F2U(obj->point.y), F2U(obj->point.z), 0x0
	|.code
	| movdqa	xmm15,		xmm2
	| subps		xmm15,		oword [<1]
	switch (obj->type) {
	case OBJ_SPHERE:
		|.data
		|1:
		|.dword F2U(obj->sphere.radius)
		|.code
		/* generate call to sdSphere */
		| dpps		xmm15,		xmm15,	0xFF
		| sqrtss	xmm8,		xmm15
		| subss		xmm8,		dword [<1]
		break;
	case OBJ_BOX:
		| mov		eax,		FLOAT_INF
		| movd		xmm8,		eax
		fprintf(stderr, "Unimplemented scene object\n");
		/* generate call to sdRoundBox */
		/* sdRoundBox(point, obj->box.point2, obj->box.radius); */
		break;
	case OBJ_PLANE:
		| movdqa	xmm8,		xmm15
		| psrldq	xmm8,		4
		break;
	case OBJ_SMOOTH_UNION:
		generate_obj_dist(Dst, obj->smooth_op.a);
		| lea		rsp,		[rsp - 4]
		| movss		dword [rsp],	xmm8
		generate_obj_dist(Dst, obj->smooth_op.b);
		/* sminf */
		|.data
		|1:
		|.dword F2U(obj->smooth_op.smoothness)
		|.code
		| movss		xmm15,		xmm8
		| movss		xmm14,		dword [rsp]
		/* h = .5 + .5 * (b - a) / k */
		| subss		xmm15,		xmm14
		| mulss		xmm15,		dword [->one_half]
		| divss		xmm15,		dword [<1]
		| addss		xmm15,		dword [->one_half]
		/* h = clamp(h, 0, 1) */
		| minss		xmm15,		dword [->one]
		| maxss		xmm15,		dword [->zero]
		/* rval = lerp(b, a, h) */
		| subss		xmm14,		xmm8
		| mulss		xmm14,		xmm15
		| addss		xmm8,		xmm14
		/* rval += k * h * (1 - h) */
		| movss		xmm14,		dword [->one]
		| subss		xmm14,		xmm15
		| mulss		xmm15,		xmm14
		| mulss		xmm15,		dword [<1]
		| subss		xmm8,		xmm15
		| lea		rsp,		[rsp + 4]
		break;
	default:
		| mov		eax,		FLOAT_INF
		| movd		xmm8,		eax
		fprintf(stderr, "Unknown scene object\n");
	}
}


/* ro = ray origin, rd = ray direction */
static
struct world_dist get_intersection(const struct scene* scene, v3 ro, v3 rd) {
	static const size_t	MAX_STEPS = 256;
	static const float	EPSILON = 0.001f;
	static const float	MAX_DIST = 100.f;

	size_t	id = 0;
	float	dist = 0.f;
	
	for (size_t i = 0; i < MAX_STEPS; i++) {
		v3 p = v3add(ro, v3scale(rd, dist));
		struct world_dist scene_dist = sdfcall(p);
		dist += scene_dist.dist;
		id = scene_dist.id;
		if (scene_dist.dist < EPSILON || dist > MAX_DIST)
			break;
	}

	if (dist >= MAX_DIST)
		id = 0;

	return (struct world_dist){ dist, id };
}

/* https://iquilezles.org/www/articles/rmshadows/rmshadows.htm */
static
float softshadow(const struct scene* scene, v3 ro, v3 rd, size_t max_steps,
	float max_dist, float w) {
	static const float	EPSILON = 0.001f;

	float res = 1.f;
	float dist = 0.f;

	for (size_t i = 0; i < max_steps; i++) {
		v3 p = v3add(ro, v3scale(rd, dist));
		float scene_dist = sdfcall(p).dist;
		res = fminf(res, w * scene_dist / dist);
		dist += scene_dist;
		if (res < -1 || dist > max_dist)
			break;
	}
	res = fmaxf(res, 0.f);
	return res;
}

static
float in_shadow(const struct scene* scene, const struct light* light, v3 p) {
	float light_dist = v3len(v3sub(light->point, p));

	v3 dir = v3normalize(v3sub(light->point, p));
	p = v3add(p, dir);

	return softshadow(scene, p, dir, 128, light_dist, 50.f);
}

static inline
struct material get_material(const struct scene* scene, size_t obj_id) {
	size_t material_id;
	if (obj_id)
		material_id = vector_get(struct object, scene->objects,
		                         obj_id - 1).material;
	else
		material_id = 0;

	return vector_get(struct material, scene->materials, material_id);
}

static v3 get_normal(const struct scene* scene, v3 p, float dist) {
	static const v3 k0 = { 1.f, -1.f, -1.f};
	static const v3 k1 = {-1.f, -1.f,  1.f};
	static const v3 k2 = {-1.f,  1.f, -1.f};
	static const v3 k3 = { 1.f,  1.f,  1.f};
	const float h = dist / 100.f;
	const v3 p0 = v3scale(k0, sdfcall(v3add(p, v3scale(k0, h))).dist);
	const v3 p1 = v3scale(k1, sdfcall(v3add(p, v3scale(k1, h))).dist);
	const v3 p2 = v3scale(k2, sdfcall(v3add(p, v3scale(k2, h))).dist);
	const v3 p3 = v3scale(k3, sdfcall(v3add(p, v3scale(k3, h))).dist);
	return v3normalize(v3add(p0, v3add(p1, v3add(p2, p3))));
}

/* Basado en el modelo Phong (wiki:Phong_reflection_model) */
static
v3 get_light(const struct scene* scene, v3 p, v3 n, size_t obj_id) {
	struct material mat = get_material(scene, obj_id);
	v3 total_light = {0.f, 0.f, 0.f};
	v3 cam_pos = scene->camera.point;
	
	/* ... por cada luz ... */
	vector_foreach(struct light, scene->lights, light) {
		float shadow = in_shadow(scene, light, p);

		v3 light_pos = light->point;
		v3 light_diffuse_intensity = light->diffuse_intensity;
		v3 light_specular_intensity = light->specular_intensity;

		v3 light_dir = v3normalize(v3sub(light_pos, p));
		v3 reflected_dir = v3sub(v3scale(n, 2.f * v3dot(light_dir, n)),
					 light_dir);
		v3 camera_dir = v3normalize(v3sub(cam_pos, p));

		/* Ajusto la iluminación mate según ángulo y sombra */
		float diffuse_incidence = clamp(v3dot(n, light_dir), 0.f, 1.f);

		light_diffuse_intensity = v3scale(light_diffuse_intensity,
		                                  shadow * diffuse_incidence);
		light_diffuse_intensity = v3mul(light_diffuse_intensity,
		                                mat.diffuse);

		total_light = v3add(total_light, light_diffuse_intensity);

		/* Ajusto la iluminación especular según ángulo */
		float specular_incidence = diffuse_incidence * powf(
			clamp(v3dot(reflected_dir, camera_dir), 0.f, 1.f),
			mat.shininess
		);

		light_specular_intensity = v3scale(light_specular_intensity,
		                                   shadow * specular_incidence);
		light_specular_intensity = v3mul(light_specular_intensity,
		                                 mat.specular);

		total_light = v3add(total_light, light_specular_intensity);
	}

	v3 light_ambient_intensity = v3mul(scene->ambient_color, mat.ambient);
	total_light = v3add(total_light, light_ambient_intensity);

	return v3clamp(total_light, 0.f, 1.f);
}

/* Based on https://www.youtube.com/watch?v=LRN_ewuN_k4 */
static inline
v3 get_camera_ray(struct camera cam, v2 view_pos, float aspect_ratio) {
	/* TODO: Es innecesario calcular todo esto para cada rayo */
	v3 up_guide = {0.f, 1.f, 0.f};
	float half_fov = cam.fov / 2.f;
	float height = atanf(half_fov);
	float width = aspect_ratio * height;
	v3 right_dir = v3normalize(v3cross(cam.direction, up_guide));
	v3 up_dir = v3cross(right_dir, cam.direction);

	v3 rval = v3add(v3scale(right_dir, view_pos.x * width),
	                v3scale(up_dir, view_pos.y * height));
	rval = v3normalize(v3add(rval, cam.direction));

	return rval;
}

int render_thread(void* ptr) {
	struct render_data* data = ptr;
	int width;
	int height;
	float fwidth;
	float fheight;

	while (true) {
		SDL_SemWait(frame_entry_barrier);
		if (SDL_AtomicGet(&exiting))
			return 0;

		SDL_Surface* surf = data->surf;
		Uint8 bytes_per_pixel = surf->format->BytesPerPixel;
		fwidth = width  = surf->w;
		fheight = height = surf->h;
		const struct scene* scene = data->scene;
		v3 ro = scene->camera.point;
		float aspect_ratio = fwidth / fheight;

		int y;
		while ((y = SDL_AtomicAdd(&current_line, 1)) < height)
		for (int x = 0; x < width; x++) {
			v2 view_pos = (v2) {
				(x + .5f) / fwidth * 2.f - 1.f,
				1.f - (y + .5f) / fheight * 2.f,
			};

			v3 rd = get_camera_ray(scene->camera, view_pos,
			                       aspect_ratio);
			struct world_dist intersect =
				get_intersection(scene, ro, rd);
			v3 p = v3add(ro, v3scale(rd, intersect.dist));
			v3 n = get_normal(scene, p, intersect.dist);
			v3 colorf = get_light(scene, p, n, intersect.id);
			/* gamma correction */
			colorf = v3pow(colorf, 1.f / 2.2f);
			Uint32 colori = colorf_to_pixfmt(colorf, surf->format);
			*((Uint32*)(surf->pixels
			            + x * bytes_per_pixel
			            + y * surf->pitch)) = colori;
		}

		SDL_SemPost(frame_exit_barrier);
	}
}

#include <unistd.h>
void render_prepare(struct render_data* data, int argc,  const char* argv[]) {
	/* TODO: Is a static variable a good idea? */
	struct jited_code code = generate_sdf(data->scene);

	data->private = sdf = code.f;

	size_t sdf_offset = (void*)code.f - code.addr;

	for (int i = 3; i < argc; i++)
		if (strcmp("-j", argv[i]) == 0)
			emit_jitdump = true;
		else if (strcmp("--jitdump", argv[i]) == 0)
			emit_jitdump = true;

	if (emit_jitdump) {
		jitdump_open();
		jitdump_emit_load("sdf", code.addr, code.size, sdf_offset);
	}
}

void render_destroy(struct render_data* scene) {
	if (emit_jitdump) {
		jitdump_close();
		emit_jitdump = false;
	}
}
